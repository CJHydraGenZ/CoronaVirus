{"version":3,"sources":["component/fetch.js","component/DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["FetchDataIndonesia","a","axios","get","response","DataRes","konfirmasi","data","confirmed","value","meninggal","deaths","sembuh","recovered","DashBoard","useState","Data","setData","useEffect","console","log","resultsData","AppBar","position","Container","maxWidth","Grid","container","spacing","item","xs","sm","Paper","Typography","variant","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAGaA,EAAkB,uCAAG,8BAAAC,EAAA,+EAEHC,IAAMC,IAAN,sDAFG,cAEpBC,EAFoB,OAGpBC,EAAU,CACZC,WAAYF,EAASG,KAAKC,UAAUC,MACpCC,UAAWN,EAASG,KAAKI,OAAOF,MAChCG,OAAQR,EAASG,KAAKM,UAAUJ,OANV,kBAQnBJ,GARmB,yFAAH,qD,gCCIxB,SAASS,IAAY,MAEAC,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,KAUxB,OAPAC,qBAAU,YACW,uCAAG,sBAAAjB,EAAA,kEAChBkB,QADgB,SACEnB,IADF,+BACRoB,IADQ,qBAEhBH,EAFgB,SAEFjB,IAFE,8EAAH,qDAIjBqB,KACD,IAEC,oCACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,0CAEJ,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eAEiBlB,EAAKV,cAI9B,kBAACoB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAEgBlB,EAAKN,aAK7B,kBAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,WACalB,EAAKJ,aC/B/BuB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACtB,EAAD,QCIcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.fbe1de67.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nexport const FetchDataIndonesia = async () => {\r\n    try {\r\n        const response = await axios.get(`https://covid19.mathdro.id/api/countries/indonesia`)\r\n        const DataRes = {\r\n            konfirmasi: response.data.confirmed.value,\r\n            meninggal: response.data.deaths.value,\r\n            sembuh: response.data.recovered.value\r\n        }\r\n        return DataRes\r\n    } catch (error) {\r\n\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { FetchDataIndonesia } from './fetch';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Paper } from '@material-ui/core';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nexport function DashBoard() {\r\n    // FetchDataIndonesia\r\n    const [Data, setData] = useState([])\r\n    useEffect(() => {\r\n        const resultsData = async () => {\r\n            console.log(await FetchDataIndonesia());\r\n            setData(await FetchDataIndonesia())\r\n        }\r\n        resultsData()\r\n    }, [])\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <h2>Indonesia</h2>\r\n            </AppBar>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <Paper>\r\n                            <Typography variant=\"h5\" >\r\n\r\n                                konfirmasi: {Data.konfirmasi}\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <Paper>\r\n                            <Typography variant=\"h5\" >\r\n\r\n                                Meninggal: {Data.meninggal}\r\n                            </Typography>\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={4}>\r\n                        <Paper>\r\n                            <Typography variant=\"h5\" >\r\n                                Sembuh: {Data.sembuh}\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React from 'react';\n\nimport './App.css';\nimport { DashBoard } from './component/DashBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DashBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}